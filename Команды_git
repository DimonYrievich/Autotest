########################################################################################################################

Написание Автотеста и создание репозитория для работы с git:

- Создаем какую-нибудь папку для проекта (у меня все проекты хранятся в PROJECTS)
- Создаем репозиторий на GitHub
- Копируем репозиторий (вкладка SSH-ключ) из GitHub, например - git@github.com:DimonYrievich/Autotest.git
- В терминале заходим в папку PROJECTS и клонируем репозиторий: git clone git@github.com:DimonYrievich/Autotest.git
- Устанавливаем библиотеку "selenium"(инструмент для автоматизации веб-браузера). Позволяет писать тесты, скрипты, боты.
  Команда - pip install selenium
- Затем нам понадобится веб-драйвер для выбранного браузера. Скачиваем ChromeDriver (https://chromedriver.chromium.org/downloads)
  для версии браузера (см. версию в настройках Chrome)
- Распаковываем ChromeDriver и перетаскиваем его в папку проекта (в данном случае Autotest)
- Пишем код в соответствии с заданием.


########################################################################################################################

Работа с git:

- Проверяем состояние репозитория - git status
- Добавляем Питоновский файл - git add Test_1.py
- Создаем коммит - git commit -m "Добавил первый тест"
- Загружаем изменения, которые сделали в локальном репозитории Git, в удаленный репозиторий - git push
- Создаем новую ветку  и сразу на неё переключаемся - git checkout -b django
- Вносим необходимые изменения
- Просмотр всех изменений - git diff
- Можно сразу добавить все файлы - git add -A   или   по отдельности - git add Test_1.py , т.е. указываем в каком месте
  что-то поменялось
- Создаем коммит - git commit -m "Изменен почти весь код в файле Test_1.py в соответствии с заданием №2, создан новый
  файл Tasks"
- Указываем, в какую ветку мы будем заливать изменения - git push --set-upstream origin django

Команда git stash:

git stash в Git используется для временного сохранения незавершенных изменений в вашем рабочем каталоге.
Использование git stash может быть удобным инструментом для временного сохранения изменений, когда нужно быстро
переключиться на другую задачу или ветку без необходимости фиксации коммита.
Основные команды git stash включают:
    - git stash save                           - Создает новый stash, сохраняя изменения в вашем рабочем каталоге
    - git stash save "Сообщение об этом stash" - можно добавить сообщение, чтобы лучше понять, что было сохранено
    - git stash list                           - Показывает список всех stash, которые были созданы
    - git stash apply                          - Применяет последний stash к рабочему каталогу
    - git stash apply stash@{0}                - Применяет конкретный stash, где stash@{0} - это версия stash, которая
                                                 выводится на экран в терминале после команды git stash list)
    - git stash pop                            - Применяет последний stash и затем удаляет его из списка stash.
    - git stash drop                           - Удаляет последний stash.
    - git stash drop stash@{0}                 - Удаляет конкретный указанный stash
    - git stash branch                         - Создает новую ветку и применяет stash к этой ветке.
    - git stash branch Новая_ветка             - После выполнения этой команды вы будете находиться в новой ветке "Новая_ветка",
                                                 и ваши изменения из stash будут применены в этой ветке.

Другие основные команды:

    - git commit 		               - Для входа в редактор в терминале
    - git commit -m "Init Skillfactory"        - Создание коммита
    - git status			       - Проверка статуса
    - git init				       - Создает новый репозиторий Git (см.выше).
    - git add <имя файла>		       - Довавить файл
    - git add -A			       - Чтобы добавить все файлы, которые находятся в директории
    - git commit -a			       - При выполнении команды с флагом -a будет сделан снимок всех изменений в рабочем каталоге. Это включает в себя только изменения отслеживаемых файлов (то есть тех, которые были добавлены с помощью git add ранее).
    - git commit -am "commit message"	       - Сочетание флагов -a и -m создаёт коммит всех изменений с сообщением для коммита.
    - git commit --amend		       - Выбранные изменения будут добавлены в последний коммит. Команда также вызовет открытие системного текстового редактора для внесения изменений в сообщение коммита. Эту команду часто используют, если была допущена ошибка.
    - git branch <name>			       - Для создания новой ветки
    - git branch -m <старое-имя-ветки новое-имя-ветки>	- Если вы ошиблись в названии, допустили опечатку. Команда для исправления.
    - git branch			       - Чтобы посмотреть список всех локальных веток в репозитории.
    - git checkout <имя ветки>		       - Чтобы перейти на другую существующую ветку. При помощи указателя HEAD (верхушка)
    - git checkout -b <имя ветки>	       - Создание новой ветки с последующим переключением на неё
    - git diff				       - Просмотр всех изменений
    - git merge				       - Чтобы внести изменения из одной ветки в другую (Слияние)
              Сначала переключиться на ту ветку, в которую мы хотим вливать, а затем уже «мержить».
				     git checkout "master"
				     git merge "name branch"
    - git merge --abort			       - Остановить операцию слияния.
    - git branch -d "имя ветки"		       - Чтобы удалить ветку
    - git branch --list			       - Выведет список веток, которые существуют в вашем локальном репозитории.
    - git branch --list -v		       - Увидите информацию о последних коммитах каждой из веток.
    - pwd				       - Показать текущий каталог
    - ls				       - Показать файлы в данной папке, кроме скрытых
    - ls -f				       - Показать файлы в данной папке, включая скрытые
    - cd c:				       - Перейти к диску (в примере диск C)
    - cd app				       - Перейти в конкретный каталог (в примере папка app)
    - cd -				       - Вернуться назад
    - cd ..				       - Подняться на один уровень вверх
    - cd ../..				       - Подняться на два уровня вверх
    - mkdir "название папки"		       - Создать папку
    - git --version 		               - На экране терминала должна появиться текущая версия программы на вашей машине.
    - git config --global user.name            - Имя пользователя
    - git config --global user.email           - Эл.почта
    - git log				       - Показывает историю изменений: перечисляет коммиты, сделанные в репозитории.
    - git push				       - Загружаем изменения, которые сделали в локальном репозитории Git, в удаленный репозиторий
    - git clone <URL_репозитория>              - Для клонирования (создания копии) удаленного репозитория Git на локальном компьютере.
                                                 Эта команда создает локальную копию репозитория, включая все его ветки, историю и файлы.
                                                 (git clone https://github.com/username/repository.git)

########################################################################################################################
